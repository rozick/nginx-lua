user www-data;
worker_processes auto;
pid /run/openresty.pid;
events {
    worker_connections  1024;
}

http {
    # Create a global variable
    lua_shared_dict great_proxies 10m;
    
    # Config options
    include       mime.types;
    default_type  application/octet-stream;	
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;

    keepalive_timeout  65;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
    ssl_prefer_server_ciphers on;

    access_log /var/log/openresty/access.log;
    error_log /var/log/openresty/error.log;
   
    gzip  on;
    gzip_disable "msie6";

    include ../sites/*;

 server {
    # Listen on port 80.
    listen 80;
    listen [::]:80;
	
    # The server name
    server_name test.localhost;
    # When we try to access this site...
    location / {
	# Our lua code
	content_by_lua_block {
	-- Get our custom header
	local header = ngx.req.get_headers()["RedirectURL"]

	-- Call our global variable
	local sites = ngx.shared.great_proxies

	 -- Set our header key in the global dictionary variable
	local set_site = sites:set("site", header)

	 -- Get info from our proxy location
	local res = ngx.location.capture("/proxy")

	 -- Log the body in our error log
	ngx.log(ngx.ERR, res.body)
	}
       }	
			
 	location /proxy {		
	# Scope our header variable to target
	# Get our header variable from the global variable
	set_by_lua $target '
	local sites = ngx.shared.great_proxies
	return sites:get("site");
	';
	
	# DNS resolver
	resolver 8.8.8.8;

	# Send our custom header
        proxy_set_header X-RapidAPI-Test true;
	proxy_pass $target$request_uri;	
	}
       } 
      }
